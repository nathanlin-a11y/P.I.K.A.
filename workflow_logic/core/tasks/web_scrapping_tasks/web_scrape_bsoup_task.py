from typing import List, Tuple, Dict, Optional, Union
from pydantic import Field
from workflow_logic.core.tasks.agent_tasks import BasicAgentTask
from workflow_logic.core.data_structures import ApiType, References, TaskResponse, References, MessageDict, FunctionParameters, ParameterDefinition
from workflow_logic.core.api import APIManager
from workflow_logic.util import LOGGER

class WebScrapeBeautifulSoupTask(BasicAgentTask):
    input_variables: FunctionParameters = Field(
        default=FunctionParameters(
            type="object",
            properties={
                "url": ParameterDefinition(
                    type="string",
                    description="The URL of the webpage to scrape."
                ),
                "selector": ParameterDefinition(
                    type="string",
                    description="CSS selector to target specific elements."
                ),
                "max_results": ParameterDefinition(
                    type="integer",
                    description="Maximum number of results to return.",
                    default=10
                )
            },
            required=["url", "selector"]
        )
    )
    required_apis: List[ApiType] = Field([ApiType.WEB_SCRAPE], description="A list of required APIs for the task")

    async def generate_agent_response(self, api_manager: APIManager, **kwargs) -> Tuple[Optional[References], int, Optional[Union[List[MessageDict], Dict[str, str]]]]:
        url: str = kwargs.get('url', "")
        selector: str = kwargs.get('selector', "")
        max_results: int = kwargs.get('max_results', 10)

        output: References = await api_manager.generate_response_with_api_engine(api_type=ApiType.WEB_SCRAPE, url=url, selector=selector, max_results=max_results)
        if not output:
            LOGGER.error("No output returned from API engine.")
            return [], 1, None
        return output, 0, None
    
    async def run(self, api_manager: APIManager, **kwargs) -> TaskResponse:     
        search_output, exitcode, start_messages = await self.generate_agent_response(api_manager, **kwargs)
        exec_history = kwargs.pop("execution_history", None)
        if not search_output: 
            return self.get_failed_task_response(diagnostics="No messages generated by the agent", **kwargs)
        str_output = search_output.detailed_summary()
        return TaskResponse(
            task_id=self.id,
            task_name=self.task_name,
            task_description=self.task_description,
            status="complete" if exitcode == 0 else "failed",
            result_code=exitcode,
            task_outputs=str_output,
            references=search_output,
            task_inputs=kwargs,
            result_diagnostic="Task executed successfully." if exitcode == 0 else "Task execution failed.",
            execution_history=exec_history
        )