import React, { useState, useEffect } from 'react';
import {
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Typography,
  Button,
  Chip,
  Dialog,
  SelectChangeEvent,
} from '@mui/material';
import { ContentType, MessageType, RoleType } from '../../../../types/ChatTypes';
import useStyles from './MessageStyles';
import { FileReference } from '../../../../types/FileTypes';
import EnhancedFile from '../../file/file/EnhancedFile';
import { useApi } from '../../../../context/ApiContext';

interface MessageDetailProps {
  message?: MessageType;
  chatId?: string;
  mode: 'view' | 'edit' | 'create';
  onUpdate?: (updatedMessage: MessageType) => void;
  onClose: () => void;
}

const MessageDetail: React.FC<MessageDetailProps> = ({ message, chatId, mode, onUpdate, onClose }) => {
  const { updateMessageInChat, sendMessage } = useApi();
  const classes = useStyles();
  const [editableMessage, setEditableMessage] = useState<MessageType>(
    message || {
      role: 'user',
      content: '',
      generated_by: 'user',
      type: 'text',
    } as MessageType
  );
  const [selectedFileReference, setSelectedFileReference] = useState<FileReference | null>(null);
  const [isFileDialogOpen, setIsFileDialogOpen] = useState(false);

  useEffect(() => {
    if (message) {
      setEditableMessage(message);
    }
  }, [message]);

  // Validate the mode
  useEffect(() => {
    if (!message && mode !== 'create') {
      console.error('No message provided. Only create mode is allowed.');
      onClose();
    }
    if (!chatId && (mode === 'edit' || mode === 'create')) {
      console.error('No chat ID provided. Only view mode is allowed.');
      onClose();
    }
  }, [message, chatId, mode, onClose]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditableMessage(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (e: SelectChangeEvent<string>) => {
    const { name, value } = e.target;
    setEditableMessage(prev => ({ ...prev, [name]: value }));
  };

  const handleSave = async () => {
    if (!chatId) {
      console.error('No chat ID provided.');
      return;
    }

    try {
      let updatedMessage: MessageType;
      if (mode === 'create') {
        const updatedChat = await sendMessage(chatId, editableMessage);
        updatedMessage = updatedChat.messages[updatedChat.messages.length - 1];
      } else {
        updatedMessage = await updateMessageInChat(chatId, editableMessage);
      }
      onUpdate?.(updatedMessage);
      onClose();
    } catch (error) {
      console.error('Error saving message:', error);
      // Handle error (e.g., show an error message to the user)
    }
  };

  const handleViewFile = (reference: FileReference) => {
    setSelectedFileReference(reference);
    setIsFileDialogOpen(true);
  };

  const handleCloseFileDialog = () => {
    setIsFileDialogOpen(false);
    setSelectedFileReference(null);
  };

  const isEditable = mode === 'edit' || mode === 'create';

  return (
    <Box className={classes.messageDetail}>
      <Typography variant="h6">{mode === 'create' ? 'Create Message' : 'Message Details'}</Typography>
      <FormControl fullWidth margin="normal">
        <InputLabel>Role</InputLabel>
        <Select<RoleType>
          value={editableMessage.role}
          onChange={handleSelectChange}
          name="role"
          disabled={!isEditable}
        >
          <MenuItem value="user">User</MenuItem>
          <MenuItem value="assistant">Assistant</MenuItem>
          <MenuItem value="system">System</MenuItem>
          <MenuItem value="tool">Tool</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        multiline
        rows={4}
        label="Content"
        value={editableMessage.content}
        onChange={handleInputChange}
        name="content"
        disabled={!isEditable}
        margin="normal"
      />
      <FormControl fullWidth margin="normal">
        <InputLabel>Generated By</InputLabel>
        <Select<'user' | 'llm' | 'tool'>
          value={editableMessage.generated_by}
          onChange={handleSelectChange}
          name="generated_by"
          disabled={!isEditable}
        >
          <MenuItem value="user">User</MenuItem>
          <MenuItem value="llm">LLM</MenuItem>
          <MenuItem value="tool">Tool</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        label="Step"
        value={editableMessage.step || ''}
        onChange={handleInputChange}
        name="step"
        disabled={!isEditable}
        margin="normal"
      />
      <TextField
        fullWidth
        label="Assistant Name"
        value={editableMessage.assistant_name || ''}
        onChange={handleInputChange}
        name="assistant_name"
        disabled={!isEditable}
        margin="normal"
      />
      <FormControl fullWidth margin="normal">
        <InputLabel>Content Type</InputLabel>
        <Select<ContentType>
          value={editableMessage.type || 'text'}
          onChange={handleSelectChange}
          name="type"
          disabled={!isEditable}
        >
          <MenuItem value="text">Text</MenuItem>
          <MenuItem value="image">Image</MenuItem>
          <MenuItem value="video">Video</MenuItem>
          <MenuItem value="audio">Audio</MenuItem>
          <MenuItem value="file">File</MenuItem>
          <MenuItem value="task_result">Task Result</MenuItem>
        </Select>
      </FormControl>
      <TextField
        fullWidth
        label="Request Type"
        value={editableMessage.request_type || ''}
        onChange={handleInputChange}
        name="request_type"
        disabled={!isEditable}
        margin="normal"
      />
      <Typography variant="subtitle1" gutterBottom>File References:</Typography>
      <Box className={classes.chipContainer}>
        {editableMessage.references?.map((reference, index) => (
          <Chip
            key={index}
            label={reference.filename}
            onClick={() => handleViewFile(reference)}
            onDelete={isEditable ? () => {
              // Handle file reference deletion
            } : undefined}
          />
        ))}
      </Box>
      {mode !== 'create' && (
        <>
          <Typography variant="subtitle1" gutterBottom>Creation Metadata:</Typography>
          <Typography variant="body2" className={classes.jsonDisplay}>
            {JSON.stringify(editableMessage.creation_metadata, null, 2)}
          </Typography>
          <Typography variant="subtitle1" gutterBottom>Context:</Typography>
          <Typography variant="body2" className={classes.jsonDisplay}>
            {JSON.stringify(editableMessage.context, null, 2)}
          </Typography>
          <Typography variant="body2">Created At: {editableMessage.createdAt?.toLocaleString()}</Typography>
          <Typography variant="body2">Updated At: {editableMessage.updatedAt?.toLocaleString()}</Typography>
        </>
      )}
      <Box className={classes.buttonContainer}>
        {isEditable ? (
          <Button variant="contained" color="primary" onClick={handleSave}>
            {mode === 'create' ? 'Create' : 'Save'}
          </Button>
        ) : null}
        <Button variant="outlined" onClick={onClose}>
          {isEditable ? 'Cancel' : 'Close'}
        </Button>
      </Box>
      <Dialog open={isFileDialogOpen} onClose={handleCloseFileDialog} maxWidth="md" fullWidth>
        {selectedFileReference && (
          <EnhancedFile itemId={selectedFileReference._id} mode="card" fetchAll={false} />
        )}
      </Dialog>
    </Box>
  );
};

export default MessageDetail;